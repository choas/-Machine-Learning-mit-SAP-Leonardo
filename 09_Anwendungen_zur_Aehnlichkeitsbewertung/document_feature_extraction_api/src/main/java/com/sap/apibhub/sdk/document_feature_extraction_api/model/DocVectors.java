/*
 * Inference Service for Document Feature Extraction
 * Document Feature Extraction API is capable of extracting feature vectors for any given document which can be used for comparison, informational retrieval, clustering or further processing
 *
 * OpenAPI spec version: Alpha
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.document_feature_extraction_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * View model of feature vector extraction results for each document containing the list of file ot text names along with their feature vector
 */
@ApiModel(description = "View model of feature vector extraction results for each document containing the list of file ot text names along with their feature vector")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-05-12T15:43:58.032Z")
public class DocVectors {
  @SerializedName("id")
  private String id = null;

  @SerializedName("embedding")
  private List<Float> embedding = new ArrayList<Float>();

  public DocVectors id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Name of the file or automatically generated id representing the input text
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Name of the file or automatically generated id representing the input text")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public DocVectors embedding(List<Float> embedding) {
    this.embedding = embedding;
    return this;
  }

  public DocVectors addEmbeddingItem(Float embeddingItem) {
    this.embedding.add(embeddingItem);
    return this;
  }

   /**
   * Get embedding
   * @return embedding
  **/
  @ApiModelProperty(required = true, value = "")
  public List<Float> getEmbedding() {
    return embedding;
  }

  public void setEmbedding(List<Float> embedding) {
    this.embedding = embedding;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocVectors docVectors = (DocVectors) o;
    return Objects.equals(this.id, docVectors.id) &&
        Objects.equals(this.embedding, docVectors.embedding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, embedding);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocVectors {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    embedding: ").append(toIndentedString(embedding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


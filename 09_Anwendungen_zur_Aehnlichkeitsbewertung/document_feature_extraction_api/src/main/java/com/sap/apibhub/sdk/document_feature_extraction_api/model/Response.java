/*
 * Inference Service for Document Feature Extraction
 * Document Feature Extraction API is capable of extracting feature vectors for any given document which can be used for comparison, informational retrieval, clustering or further processing
 *
 * OpenAPI spec version: Alpha
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.document_feature_extraction_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sap.apibhub.sdk.document_feature_extraction_api.model.DocVectors;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;

/**
 * View model of a generic response
 */
@ApiModel(description = "View model of a generic response")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-05-12T15:43:58.032Z")
public class Response {
  @SerializedName("_id")
  private String id = null;

  @SerializedName("error")
  private String error = null;

  @SerializedName("IGNORE_request")
  private String request = null;

  @SerializedName("doc_vectors")
  private List<DocVectors> docVectors = null;

  /**
   * Indicator of success and failure respectively
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("QUEUED"),
    
    DONE("DONE"),
    
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("tenantName")
  private String tenantName = null;

  @SerializedName("IGNORE_processed_time")
  private DateTime processedTime = null;

  @SerializedName("error_description")
  private String errorDescription = null;

  public Response id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Job Id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Job Id")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Response error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Error message
   * @return error
  **/
  @ApiModelProperty(value = "Error message")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }

  public Response request(String request) {
    this.request = request;
    return this;
  }

   /**
   * A copy of the request
   * @return request
  **/
  @ApiModelProperty(required = true, value = "A copy of the request")
  public String getRequest() {
    return request;
  }

  public void setRequest(String request) {
    this.request = request;
  }

  public Response docVectors(List<DocVectors> docVectors) {
    this.docVectors = docVectors;
    return this;
  }

  public Response addDocVectorsItem(DocVectors docVectorsItem) {
    if (this.docVectors == null) {
      this.docVectors = new ArrayList<DocVectors>();
    }
    this.docVectors.add(docVectorsItem);
    return this;
  }

   /**
   * Inference results. List containing the file name and feature vector
   * @return docVectors
  **/
  @ApiModelProperty(value = "Inference results. List containing the file name and feature vector")
  public List<DocVectors> getDocVectors() {
    return docVectors;
  }

  public void setDocVectors(List<DocVectors> docVectors) {
    this.docVectors = docVectors;
  }

  public Response status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Indicator of success and failure respectively
   * @return status
  **/
  @ApiModelProperty(required = true, value = "Indicator of success and failure respectively")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Response tenantName(String tenantName) {
    this.tenantName = tenantName;
    return this;
  }

   /**
   * Tenant name used on the request
   * @return tenantName
  **/
  @ApiModelProperty(value = "Tenant name used on the request")
  public String getTenantName() {
    return tenantName;
  }

  public void setTenantName(String tenantName) {
    this.tenantName = tenantName;
  }

  public Response processedTime(DateTime processedTime) {
    this.processedTime = processedTime;
    return this;
  }

   /**
   * Timestamp
   * @return processedTime
  **/
  @ApiModelProperty(value = "Timestamp")
  public DateTime getProcessedTime() {
    return processedTime;
  }

  public void setProcessedTime(DateTime processedTime) {
    this.processedTime = processedTime;
  }

  public Response errorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
    return this;
  }

   /**
   * Additional information in case of errors
   * @return errorDescription
  **/
  @ApiModelProperty(value = "Additional information in case of errors")
  public String getErrorDescription() {
    return errorDescription;
  }

  public void setErrorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Response response = (Response) o;
    return Objects.equals(this.id, response.id) &&
        Objects.equals(this.error, response.error) &&
        Objects.equals(this.request, response.request) &&
        Objects.equals(this.docVectors, response.docVectors) &&
        Objects.equals(this.status, response.status) &&
        Objects.equals(this.tenantName, response.tenantName) &&
        Objects.equals(this.processedTime, response.processedTime) &&
        Objects.equals(this.errorDescription, response.errorDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, error, request, docVectors, status, tenantName, processedTime, errorDescription);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Response {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    docVectors: ").append(toIndentedString(docVectors)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tenantName: ").append(toIndentedString(tenantName)).append("\n");
    sb.append("    processedTime: ").append(toIndentedString(processedTime)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


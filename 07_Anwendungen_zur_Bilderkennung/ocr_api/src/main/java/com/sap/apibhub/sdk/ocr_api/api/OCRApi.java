/*
 * Inference Service for Optical Character Recognition (OCR)
 * Optical Character Recognition service takes an uploaded file and returns the text characters detected in the input.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.ocr_api.api;

import com.sap.apibhub.sdk.client.ApiCallback;
import com.sap.apibhub.sdk.client.ApiClient;
import com.sap.apibhub.sdk.client.ApiException;
import com.sap.apibhub.sdk.client.ApiResponse;
import com.sap.apibhub.sdk.client.Configuration;
import com.sap.apibhub.sdk.client.Pair;
import com.sap.apibhub.sdk.client.ProgressRequestBody;
import com.sap.apibhub.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.sap.apibhub.sdk.ocr_api.model.ResponseError;
import com.sap.apibhub.sdk.ocr_api.model.ResponseJobSubmitted;
import com.sap.apibhub.sdk.ocr_api.model.ResponsePending;
import com.sap.apibhub.sdk.ocr_api.model.ResponseResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OCRApi {
    private ApiClient apiClient;

    public OCRApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OCRApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for ocrJobsIdGet */
    private com.squareup.okhttp.Call ocrJobsIdGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ocr/jobs/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "Oauth2_ClientCredentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ocrJobsIdGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ocrJobsIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = ocrJobsIdGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return text classification result based on id of a request.
     * Receives the id of a request submitted previously and returns the corresponding processing result, or an error if no result for the given id was found. 
     * @param id The identifier returned upon submitting the processing request. (required)
     * @return ResponseResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseResult ocrJobsIdGet(String id) throws ApiException {
        ApiResponse<ResponseResult> resp = ocrJobsIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Return text classification result based on id of a request.
     * Receives the id of a request submitted previously and returns the corresponding processing result, or an error if no result for the given id was found. 
     * @param id The identifier returned upon submitting the processing request. (required)
     * @return ApiResponse&lt;ResponseResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseResult> ocrJobsIdGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = ocrJobsIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ResponseResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return text classification result based on id of a request. (asynchronously)
     * Receives the id of a request submitted previously and returns the corresponding processing result, or an error if no result for the given id was found. 
     * @param id The identifier returned upon submitting the processing request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ocrJobsIdGetAsync(String id, final ApiCallback<ResponseResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ocrJobsIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for ocrJobsPost */
    private com.squareup.okhttp.Call ocrJobsPostCall(File files, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ocr/jobs".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (options != null)
        localVarFormParams.put("options", options);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "Oauth2_ClientCredentials" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ocrJobsPostValidateBeforeCall(File files, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException("Missing the required parameter 'files' when calling ocrJobsPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = ocrJobsPostCall(files, options, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Classify text asynchronously.
     * OCR service (asynchronous) enables the client to process documents in more decoupled way: &lt;ul&gt; &lt;li&gt;In the first step the client submits a &lt;i&gt;document file&lt;/i&gt; with .pdf extension, or &lt;i&gt;image file&lt;/i&gt; in the format .jpeg, .jpe, or .png as input and receives the id of the request.&lt;/li&gt; &lt;li&gt;In the second step, the client uses this id to request for the result of processing by invoking &lt;b&gt;GET /jobs/{id}&lt;b&gt;&lt;/li&gt; &lt;/ul&gt; 
     * @param files The file to be uploaded. &lt;br&gt;Either one pdf file, or one image file is supported: &lt;ul&gt; &lt;li&gt;Image file - &lt;i&gt;image format, such as .jpeg, .jpe, .png&lt;/li&gt; &lt;li&gt;PDF file - &lt;i&gt;one file with the format &#39;pdf&#39; or &#39;*.PDF&#39;&lt;/li&gt; &lt;/ul&gt; (required)
     * @param options Parameters appled upon recognition, provided within a json structure, for example: &lt;br&gt; &lt;br&gt;&lt;pre&gt;{\&quot;lang\&quot;: \&quot;en,de\&quot;, \&quot;outputType\&quot;: \&quot;txt\&quot;, \&quot;pageSegMode\&quot;: \&quot;1\&quot;, \&quot;modelType\&quot;: \&quot;lstmStandard\&quot;}&lt;/pre&gt; &lt;br&gt;The following settings are available: &lt;br&gt;&lt;b&gt;lang&lt;/b&gt;: The language of the text submitted separated by commas. A maximum of 3 languages can be set. &lt;ul&gt; &lt;li&gt;en - English &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;outputType&lt;/b&gt;: The output type of the result &lt;ul&gt; &lt;li&gt;txt - plain text &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;xml - text with markup and additional attributes&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;pageSegMode&lt;/b&gt;: The page segmentation mode &lt;ul&gt; &lt;li&gt;0 - Orientation and script detection (OSD) only&lt;/li&gt; &lt;li&gt;1 - Automatic page segmentation with OSD &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;3 - Fully automatic page segmentation, but no OSD&lt;/li&gt; &lt;li&gt;4 - Assume a single column of text of variable sizes&lt;/li&gt; &lt;li&gt;5 - Assume a single uniform block of vertically aligned text&lt;/li&gt; &lt;li&gt;6 - Assume a single uniform block of text&lt;/li&gt; &lt;li&gt;7 - Treat the image as a single text line&lt;/li&gt; &lt;li&gt;8 - Treat the image as a single word&lt;/li&gt; &lt;li&gt;9 - Treat the image as a single word in a circle&lt;/li&gt; &lt;li&gt;10 - Treat the image as a single character&lt;/li&gt; &lt;li&gt;11 - Sparse text. Find as much text as possible in no particular order&lt;/li&gt; &lt;li&gt;12 - Sparse text with OSD&lt;/li&gt; &lt;li&gt;13 - Raw line. Treat the image as a single text line, bypassing hacks that are Tesseract-specific&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;modelType&lt;/b&gt;: Type type of the machine learning model for ocr &lt;ul&gt; &lt;li&gt;lstmPrecise - precise model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmFast - fast model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmStandard - standard model with lstm cells &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;noLstm - model without LSTM cells&lt;/li&gt; &lt;li&gt;all - model with LSTM cells and standard processing algorithms&lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ResponseJobSubmitted
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseJobSubmitted ocrJobsPost(File files, String options) throws ApiException {
        ApiResponse<ResponseJobSubmitted> resp = ocrJobsPostWithHttpInfo(files, options);
        return resp.getData();
    }

    /**
     * Classify text asynchronously.
     * OCR service (asynchronous) enables the client to process documents in more decoupled way: &lt;ul&gt; &lt;li&gt;In the first step the client submits a &lt;i&gt;document file&lt;/i&gt; with .pdf extension, or &lt;i&gt;image file&lt;/i&gt; in the format .jpeg, .jpe, or .png as input and receives the id of the request.&lt;/li&gt; &lt;li&gt;In the second step, the client uses this id to request for the result of processing by invoking &lt;b&gt;GET /jobs/{id}&lt;b&gt;&lt;/li&gt; &lt;/ul&gt; 
     * @param files The file to be uploaded. &lt;br&gt;Either one pdf file, or one image file is supported: &lt;ul&gt; &lt;li&gt;Image file - &lt;i&gt;image format, such as .jpeg, .jpe, .png&lt;/li&gt; &lt;li&gt;PDF file - &lt;i&gt;one file with the format &#39;pdf&#39; or &#39;*.PDF&#39;&lt;/li&gt; &lt;/ul&gt; (required)
     * @param options Parameters appled upon recognition, provided within a json structure, for example: &lt;br&gt; &lt;br&gt;&lt;pre&gt;{\&quot;lang\&quot;: \&quot;en,de\&quot;, \&quot;outputType\&quot;: \&quot;txt\&quot;, \&quot;pageSegMode\&quot;: \&quot;1\&quot;, \&quot;modelType\&quot;: \&quot;lstmStandard\&quot;}&lt;/pre&gt; &lt;br&gt;The following settings are available: &lt;br&gt;&lt;b&gt;lang&lt;/b&gt;: The language of the text submitted separated by commas. A maximum of 3 languages can be set. &lt;ul&gt; &lt;li&gt;en - English &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;outputType&lt;/b&gt;: The output type of the result &lt;ul&gt; &lt;li&gt;txt - plain text &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;xml - text with markup and additional attributes&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;pageSegMode&lt;/b&gt;: The page segmentation mode &lt;ul&gt; &lt;li&gt;0 - Orientation and script detection (OSD) only&lt;/li&gt; &lt;li&gt;1 - Automatic page segmentation with OSD &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;3 - Fully automatic page segmentation, but no OSD&lt;/li&gt; &lt;li&gt;4 - Assume a single column of text of variable sizes&lt;/li&gt; &lt;li&gt;5 - Assume a single uniform block of vertically aligned text&lt;/li&gt; &lt;li&gt;6 - Assume a single uniform block of text&lt;/li&gt; &lt;li&gt;7 - Treat the image as a single text line&lt;/li&gt; &lt;li&gt;8 - Treat the image as a single word&lt;/li&gt; &lt;li&gt;9 - Treat the image as a single word in a circle&lt;/li&gt; &lt;li&gt;10 - Treat the image as a single character&lt;/li&gt; &lt;li&gt;11 - Sparse text. Find as much text as possible in no particular order&lt;/li&gt; &lt;li&gt;12 - Sparse text with OSD&lt;/li&gt; &lt;li&gt;13 - Raw line. Treat the image as a single text line, bypassing hacks that are Tesseract-specific&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;modelType&lt;/b&gt;: Type type of the machine learning model for ocr &lt;ul&gt; &lt;li&gt;lstmPrecise - precise model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmFast - fast model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmStandard - standard model with lstm cells &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;noLstm - model without LSTM cells&lt;/li&gt; &lt;li&gt;all - model with LSTM cells and standard processing algorithms&lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;ResponseJobSubmitted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseJobSubmitted> ocrJobsPostWithHttpInfo(File files, String options) throws ApiException {
        com.squareup.okhttp.Call call = ocrJobsPostValidateBeforeCall(files, options, null, null);
        Type localVarReturnType = new TypeToken<ResponseJobSubmitted>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Classify text asynchronously. (asynchronously)
     * OCR service (asynchronous) enables the client to process documents in more decoupled way: &lt;ul&gt; &lt;li&gt;In the first step the client submits a &lt;i&gt;document file&lt;/i&gt; with .pdf extension, or &lt;i&gt;image file&lt;/i&gt; in the format .jpeg, .jpe, or .png as input and receives the id of the request.&lt;/li&gt; &lt;li&gt;In the second step, the client uses this id to request for the result of processing by invoking &lt;b&gt;GET /jobs/{id}&lt;b&gt;&lt;/li&gt; &lt;/ul&gt; 
     * @param files The file to be uploaded. &lt;br&gt;Either one pdf file, or one image file is supported: &lt;ul&gt; &lt;li&gt;Image file - &lt;i&gt;image format, such as .jpeg, .jpe, .png&lt;/li&gt; &lt;li&gt;PDF file - &lt;i&gt;one file with the format &#39;pdf&#39; or &#39;*.PDF&#39;&lt;/li&gt; &lt;/ul&gt; (required)
     * @param options Parameters appled upon recognition, provided within a json structure, for example: &lt;br&gt; &lt;br&gt;&lt;pre&gt;{\&quot;lang\&quot;: \&quot;en,de\&quot;, \&quot;outputType\&quot;: \&quot;txt\&quot;, \&quot;pageSegMode\&quot;: \&quot;1\&quot;, \&quot;modelType\&quot;: \&quot;lstmStandard\&quot;}&lt;/pre&gt; &lt;br&gt;The following settings are available: &lt;br&gt;&lt;b&gt;lang&lt;/b&gt;: The language of the text submitted separated by commas. A maximum of 3 languages can be set. &lt;ul&gt; &lt;li&gt;en - English &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;outputType&lt;/b&gt;: The output type of the result &lt;ul&gt; &lt;li&gt;txt - plain text &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;xml - text with markup and additional attributes&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;pageSegMode&lt;/b&gt;: The page segmentation mode &lt;ul&gt; &lt;li&gt;0 - Orientation and script detection (OSD) only&lt;/li&gt; &lt;li&gt;1 - Automatic page segmentation with OSD &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;3 - Fully automatic page segmentation, but no OSD&lt;/li&gt; &lt;li&gt;4 - Assume a single column of text of variable sizes&lt;/li&gt; &lt;li&gt;5 - Assume a single uniform block of vertically aligned text&lt;/li&gt; &lt;li&gt;6 - Assume a single uniform block of text&lt;/li&gt; &lt;li&gt;7 - Treat the image as a single text line&lt;/li&gt; &lt;li&gt;8 - Treat the image as a single word&lt;/li&gt; &lt;li&gt;9 - Treat the image as a single word in a circle&lt;/li&gt; &lt;li&gt;10 - Treat the image as a single character&lt;/li&gt; &lt;li&gt;11 - Sparse text. Find as much text as possible in no particular order&lt;/li&gt; &lt;li&gt;12 - Sparse text with OSD&lt;/li&gt; &lt;li&gt;13 - Raw line. Treat the image as a single text line, bypassing hacks that are Tesseract-specific&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;modelType&lt;/b&gt;: Type type of the machine learning model for ocr &lt;ul&gt; &lt;li&gt;lstmPrecise - precise model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmFast - fast model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmStandard - standard model with lstm cells &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;noLstm - model without LSTM cells&lt;/li&gt; &lt;li&gt;all - model with LSTM cells and standard processing algorithms&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ocrJobsPostAsync(File files, String options, final ApiCallback<ResponseJobSubmitted> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ocrJobsPostValidateBeforeCall(files, options, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseJobSubmitted>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for ocrPost */
    private com.squareup.okhttp.Call ocrPostCall(File files, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ocr".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (options != null)
        localVarFormParams.put("options", options);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "Oauth2_ClientCredentials" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ocrPostValidateBeforeCall(File files, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException("Missing the required parameter 'files' when calling ocrPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = ocrPostCall(files, options, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Classify text synchronously.
     * OCR service (synchronous) accepts a &lt;i&gt;document file&lt;/i&gt; with .pdf extension, or &lt;i&gt;image file&lt;/i&gt; in the format .jpeg, .jpe, or .png as input and returns the result in text or xml format.&lt;br&gt;&lt;br&gt; 
     * @param files The file to be uploaded. &lt;br&gt;Either one pdf file, or one image file is supported: &lt;ul&gt; &lt;li&gt;Image file - &lt;i&gt;image format, such as .jpeg, .jpe, .png&lt;/i&gt; &lt;li&gt;PDF file - &lt;i&gt;one file with the format &#39;pdf&#39; or &#39;*.PDF&#39;&lt;/i&gt; &lt;/ul&gt; (required)
     * @param options Parameters appled upon recognition, provided within a json string, for example: &lt;br&gt; &lt;br&gt;&lt;pre&gt;{\&quot;lang\&quot;: \&quot;en,de\&quot;, \&quot;outputType\&quot;: \&quot;txt\&quot;, \&quot;pageSegMode\&quot;: \&quot;1\&quot;, \&quot;modelType\&quot;: \&quot;lstmStandard\&quot;}&lt;/pre&gt; &lt;br&gt;The following settings are available: &lt;br&gt;&lt;b&gt;lang&lt;/b&gt;: The language of the text submitted separated by commas. A maximum of 3 languages can be set. &lt;ul&gt; &lt;li&gt;en - English &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;outputType&lt;/b&gt;: The output type of the result &lt;ul&gt; &lt;li&gt;txt - plain text &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;xml - text with markup and additional attributes&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;pageSegMode&lt;/b&gt;: The page segmentation mode &lt;ul&gt; &lt;li&gt;0 - Orientation and script detection (OSD) only&lt;/li&gt; &lt;li&gt;1 - Automatic page segmentation with OSD &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;3 - Fully automatic page segmentation, but no OSD&lt;/li&gt; &lt;li&gt;4 - Assume a single column of text of variable sizes&lt;/li&gt; &lt;li&gt;5 - Assume a single uniform block of vertically aligned text&lt;/li&gt; &lt;li&gt;6 - Assume a single uniform block of text&lt;/li&gt; &lt;li&gt;7 - Treat the image as a single text line&lt;/li&gt; &lt;li&gt;8 - Treat the image as a single word&lt;/li&gt; &lt;li&gt;9 - Treat the image as a single word in a circle&lt;/li&gt; &lt;li&gt;10 - Treat the image as a single character&lt;/li&gt; &lt;li&gt;11 - Sparse text. Find as much text as possible in no particular order&lt;/li&gt; &lt;li&gt;12 - Sparse text with OSD&lt;/li&gt; &lt;li&gt;13 - Raw line. Treat the image as a single text line, bypassing hacks that are Tesseract-specific&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;modelType&lt;/b&gt;: Type type of the machine learning model for ocr &lt;ul&gt; &lt;li&gt;lstmPrecise - precise model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmFast - fast model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmStandard - standard model with lstm cells &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;noLstm - model without LSTM cells&lt;/li&gt; &lt;li&gt;all - model with LSTM cells and standard processing algorithms&lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ResponseResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseResult ocrPost(File files, String options) throws ApiException {
        ApiResponse<ResponseResult> resp = ocrPostWithHttpInfo(files, options);
        return resp.getData();
    }

    /**
     * Classify text synchronously.
     * OCR service (synchronous) accepts a &lt;i&gt;document file&lt;/i&gt; with .pdf extension, or &lt;i&gt;image file&lt;/i&gt; in the format .jpeg, .jpe, or .png as input and returns the result in text or xml format.&lt;br&gt;&lt;br&gt; 
     * @param files The file to be uploaded. &lt;br&gt;Either one pdf file, or one image file is supported: &lt;ul&gt; &lt;li&gt;Image file - &lt;i&gt;image format, such as .jpeg, .jpe, .png&lt;/i&gt; &lt;li&gt;PDF file - &lt;i&gt;one file with the format &#39;pdf&#39; or &#39;*.PDF&#39;&lt;/i&gt; &lt;/ul&gt; (required)
     * @param options Parameters appled upon recognition, provided within a json string, for example: &lt;br&gt; &lt;br&gt;&lt;pre&gt;{\&quot;lang\&quot;: \&quot;en,de\&quot;, \&quot;outputType\&quot;: \&quot;txt\&quot;, \&quot;pageSegMode\&quot;: \&quot;1\&quot;, \&quot;modelType\&quot;: \&quot;lstmStandard\&quot;}&lt;/pre&gt; &lt;br&gt;The following settings are available: &lt;br&gt;&lt;b&gt;lang&lt;/b&gt;: The language of the text submitted separated by commas. A maximum of 3 languages can be set. &lt;ul&gt; &lt;li&gt;en - English &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;outputType&lt;/b&gt;: The output type of the result &lt;ul&gt; &lt;li&gt;txt - plain text &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;xml - text with markup and additional attributes&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;pageSegMode&lt;/b&gt;: The page segmentation mode &lt;ul&gt; &lt;li&gt;0 - Orientation and script detection (OSD) only&lt;/li&gt; &lt;li&gt;1 - Automatic page segmentation with OSD &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;3 - Fully automatic page segmentation, but no OSD&lt;/li&gt; &lt;li&gt;4 - Assume a single column of text of variable sizes&lt;/li&gt; &lt;li&gt;5 - Assume a single uniform block of vertically aligned text&lt;/li&gt; &lt;li&gt;6 - Assume a single uniform block of text&lt;/li&gt; &lt;li&gt;7 - Treat the image as a single text line&lt;/li&gt; &lt;li&gt;8 - Treat the image as a single word&lt;/li&gt; &lt;li&gt;9 - Treat the image as a single word in a circle&lt;/li&gt; &lt;li&gt;10 - Treat the image as a single character&lt;/li&gt; &lt;li&gt;11 - Sparse text. Find as much text as possible in no particular order&lt;/li&gt; &lt;li&gt;12 - Sparse text with OSD&lt;/li&gt; &lt;li&gt;13 - Raw line. Treat the image as a single text line, bypassing hacks that are Tesseract-specific&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;modelType&lt;/b&gt;: Type type of the machine learning model for ocr &lt;ul&gt; &lt;li&gt;lstmPrecise - precise model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmFast - fast model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmStandard - standard model with lstm cells &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;noLstm - model without LSTM cells&lt;/li&gt; &lt;li&gt;all - model with LSTM cells and standard processing algorithms&lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;ResponseResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseResult> ocrPostWithHttpInfo(File files, String options) throws ApiException {
        com.squareup.okhttp.Call call = ocrPostValidateBeforeCall(files, options, null, null);
        Type localVarReturnType = new TypeToken<ResponseResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Classify text synchronously. (asynchronously)
     * OCR service (synchronous) accepts a &lt;i&gt;document file&lt;/i&gt; with .pdf extension, or &lt;i&gt;image file&lt;/i&gt; in the format .jpeg, .jpe, or .png as input and returns the result in text or xml format.&lt;br&gt;&lt;br&gt; 
     * @param files The file to be uploaded. &lt;br&gt;Either one pdf file, or one image file is supported: &lt;ul&gt; &lt;li&gt;Image file - &lt;i&gt;image format, such as .jpeg, .jpe, .png&lt;/i&gt; &lt;li&gt;PDF file - &lt;i&gt;one file with the format &#39;pdf&#39; or &#39;*.PDF&#39;&lt;/i&gt; &lt;/ul&gt; (required)
     * @param options Parameters appled upon recognition, provided within a json string, for example: &lt;br&gt; &lt;br&gt;&lt;pre&gt;{\&quot;lang\&quot;: \&quot;en,de\&quot;, \&quot;outputType\&quot;: \&quot;txt\&quot;, \&quot;pageSegMode\&quot;: \&quot;1\&quot;, \&quot;modelType\&quot;: \&quot;lstmStandard\&quot;}&lt;/pre&gt; &lt;br&gt;The following settings are available: &lt;br&gt;&lt;b&gt;lang&lt;/b&gt;: The language of the text submitted separated by commas. A maximum of 3 languages can be set. &lt;ul&gt; &lt;li&gt;en - English &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;de - German&lt;/li&gt; &lt;li&gt;fr - French&lt;/li&gt; &lt;li&gt;es - Spanish&lt;/li&gt; &lt;li&gt;ru - Russian&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;outputType&lt;/b&gt;: The output type of the result &lt;ul&gt; &lt;li&gt;txt - plain text &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;xml - text with markup and additional attributes&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;pageSegMode&lt;/b&gt;: The page segmentation mode &lt;ul&gt; &lt;li&gt;0 - Orientation and script detection (OSD) only&lt;/li&gt; &lt;li&gt;1 - Automatic page segmentation with OSD &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;3 - Fully automatic page segmentation, but no OSD&lt;/li&gt; &lt;li&gt;4 - Assume a single column of text of variable sizes&lt;/li&gt; &lt;li&gt;5 - Assume a single uniform block of vertically aligned text&lt;/li&gt; &lt;li&gt;6 - Assume a single uniform block of text&lt;/li&gt; &lt;li&gt;7 - Treat the image as a single text line&lt;/li&gt; &lt;li&gt;8 - Treat the image as a single word&lt;/li&gt; &lt;li&gt;9 - Treat the image as a single word in a circle&lt;/li&gt; &lt;li&gt;10 - Treat the image as a single character&lt;/li&gt; &lt;li&gt;11 - Sparse text. Find as much text as possible in no particular order&lt;/li&gt; &lt;li&gt;12 - Sparse text with OSD&lt;/li&gt; &lt;li&gt;13 - Raw line. Treat the image as a single text line, bypassing hacks that are Tesseract-specific&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;b&gt;modelType&lt;/b&gt;: Type type of the machine learning model for ocr &lt;ul&gt; &lt;li&gt;lstmPrecise - precise model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmFast - fast model with LSTM cells&lt;/li&gt; &lt;li&gt;lstmStandard - standard model with lstm cells &lt;b&gt;(Default)&lt;/b&gt;&lt;/li&gt; &lt;li&gt;noLstm - model without LSTM cells&lt;/li&gt; &lt;li&gt;all - model with LSTM cells and standard processing algorithms&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ocrPostAsync(File files, String options, final ApiCallback<ResponseResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ocrPostValidateBeforeCall(files, options, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
